services:
  # API Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: development
    container_name: dashboard-api-dev
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ./package.json:/app/package.json:ro
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./turbo.json:/app/turbo.json:ro
    networks:
      - dashboard-network
    restart: unless-stopped


  # Web Service
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: development
    container_name: dashboard-web-dev
    ports:
      - "5173:5173"
    env_file:
      - .env
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - ./package.json:/app/package.json:ro
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ./pnpm-workspace.yaml:/app/pnpm-workspace.yaml:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./turbo.json:/app/turbo.json:ro
    working_dir: /app
    depends_on:
      - api
    networks:
      - dashboard-network
    restart: unless-stopped



  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: tcstudio-postgres-dev
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: tc_studio
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres101
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dashboard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional, for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: dashboard-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dashboard-network
    restart: unless-stopped
    profiles:
      - redis  # Only start with --profile redis

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: dashboard-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dashboard-network
    restart: unless-stopped
    profiles:
      - observability  # Only start with --profile observability

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dashboard-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - dashboard-network
    restart: unless-stopped
    profiles:
      - observability  # Only start with --profile observability

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dashboard-network:
    driver: bridge
